@model IEnumerable<Planner.Models.Tarefa>


@{
    var dataBase = (DateTime)ViewBag.DataBase;
    var dataAnterior = dataBase.AddDays(-7);
    var dataProxima = dataBase.AddDays(7);
    var diasSemana = new[] { "domingo", "segunda", "terça", "quarta", "quinta", "sexta", "sábado" };
    var lembretesSemana = ViewBag.lembretesSemana as List<Planner.Models.Lembrete> ?? new List<Planner.Models.Lembrete>();
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Planner Semanal</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="~/css/style.css">


    <div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
        @if (ViewBag.LembretesHoje != null)
        {
            var lembretesHoje = (List<Planner.Models.Lembrete>)ViewBag.LembretesHoje;

            if (lembretesHoje.Any())
            {
                foreach (var lembrete in lembretesHoje)
                {

                    <div class="toast align-items-center text-bg-warning border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">
                                <!-- Ícone de sino adicionado ao lado da palavra "Atenção" -->
                                <i class="bi bi-bell-fill" style="color:black;"></i> <strong>Atenção!</strong> Seu lembrete "<strong>@lembrete.Titulo</strong>" está próximo de acontecer <strong>@lembrete.DataHora.ToString("dd/MM/yyyy HH:mm")</strong>.
                            </div>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>

                }
            }
            else
            {

                <div class="toast align-items-center text-bg-info border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            Você não tem lembretes próximos.
                        </div>
                        <button type="button" class="btn-close btn-close-white ms-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>

            }
        }
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

    <script>
        $(document).ready(function () {
            $('.toast').toast();
            $('.toast').toast('show');
        });
    </script>
</head>



<body>
    <div class="planner-container">
        <!-- Adicionando o título e a navegação -->
        <div class="header-container">
            <h1 class="planner-title">Planner Semanal</h1>
            <div class="navigation-buttons">
                <a href="@Url.Action("Index", new { dataReferencia = dataAnterior })" class="btn btn-outline-primary">Semana Anterior</a>
                
                <a href="@Url.Action("Index", new { dataReferencia = dataProxima })" class="btn btn-outline-primary">Próxima Semana</a>
            </div>
        </div>

        <div class="planner">
            @{
                var diasDaSemana = new List<string> { "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado", "Domingo" };

                Dictionary<DayOfWeek, List<Planner.Models.Tarefa>> tarefasPorDia = Model
                .GroupBy(t => t.Dia.DayOfWeek)
                .ToDictionary(g => g.Key, g => g.ToList());

                var categoriaCores = new Dictionary<Planner.Models.Enum.Categoria, string>
            {
            { Planner.Models.Enum.Categoria.Trabalho, "#ff8c00" },  // Laranja
            { Planner.Models.Enum.Categoria.Pessoal, "#1e90ff" },   // Azul
            { Planner.Models.Enum.Categoria.Estudo, "#32cd32" },    // Verde
            { Planner.Models.Enum.Categoria.Saude, "#ff1493" },     // Rosa
            { Planner.Models.Enum.Categoria.Lazer, "#ff4500" },     // Vermelho
            { Planner.Models.Enum.Categoria.Outros, "#8a2be2" }     // Roxo
            };
            }

            @for (int i = 0; i < 7; i++)
            {
                var diaAtual = (DayOfWeek)((i + 1) % 7);
                var tarefasDia = Model.Where(t => t.Dia.DayOfWeek == diaAtual).ToList();

                // Calcular a data atual em relação ao início da semana
                var dataAtual = dataBase.AddDays(i);
                var diaDaSemana = diasDaSemana[i]; // Nome do dia da semana

                <div class="day">
                    <!-- Exibir o nome do dia da semana e a data no formato desejado -->
                    <h2>@diaDaSemana @dataAtual.ToString("dd/MM")</h2>
                    <ul>
                        @foreach (var tarefa in tarefasDia)
                        {
                            var corCategoria = categoriaCores.ContainsKey(tarefa.CategoriaAtividade)
                            ? categoriaCores[tarefa.CategoriaAtividade]
                            : "#000000"; // Cor padrão

                            var statusClasse = tarefa.StatusTarefa == Planner.Models.Enum.StatusTarefa.executada
                            ? "riscado"
                            : "";

                            <li style="color: @corCategoria;" class="@statusClasse">
                                <a href="@Url.Action("Detalhes", "Tarefa", new { id = tarefa.Id })" style="color: inherit; text-decoration: none;">
                                    <strong>@tarefa.Titulo</strong> - @tarefa.Inicio.ToString(@"hh\:mm") às @tarefa.Fim.ToString(@"hh\:mm")
                                </a>

                                <!-- Dropdown minimalista para seleção do status -->
                                <div class="dropdown d-inline">
                                    <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownStatus_@tarefa.Id" data-bs-toggle="dropdown" aria-expanded="false" style="padding: 1px 2px; font-size: 0.75rem;">
                                        <!-- Ícone de seta para baixo -->
                                        <i class="bi bi-chevron-down"></i>
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownStatus_@tarefa.Id">
                                        @foreach (var status in Enum.GetValues(typeof(Planner.Models.Enum.StatusTarefa)).Cast<Planner.Models.Enum.StatusTarefa>())
                                        {
                                            <li>
                                                <form asp-action="AlterarStatus" method="post" class="d-inline">
                                                    <input type="hidden" name="id" value="@tarefa.Id" />
                                                    <input type="hidden" name="novoStatus" value="@status" />
                                                    <button type="submit" class="dropdown-item" style="font-size: 0.85rem;">
                                                        @status.ToString()
                                                    </button>
                                                </form>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </li>
                        }
                        <li>
                            <a href="@Url.Action("Adicionar", "Tarefa")" style="color: inherit; text-decoration: none;">
                                <button style="background: none; border: none; color: inherit; cursor: pointer; padding: 0;">
                                    +
                                </button>
                                Adicionar tarefa
                            </a>
                        </li>
                    </ul>
                </div>
            }

        </div>
        <div class="classes-container">
            <div class="anot">
                <h2>Anotações</h2>
                <ul>
                    @foreach (var lembrete in lembretesSemana.Where(l => l.TipoLembrete == Planner.Models.Enum.TipoLembrete.Anotacao))
                    {
                        <li>@lembrete.Titulo - @lembrete.DataHora.ToString("dd/MM/yyyy HH:mm")</li>
                    }
                </ul>
            </div>

            <div class="liga">
                <h2>Ligações</h2>
                <ul>
                    @foreach (var lembrete in lembretesSemana.Where(l => l.TipoLembrete == Planner.Models.Enum.TipoLembrete.Ligacoes_importantes))
                    {
                        <li>@lembrete.Titulo - @lembrete.DataHora.ToString("dd/MM/yyyy HH:mm")</li>
                    }
                </ul>
            </div>

            <div class="reune">
                <h2>Reuniões</h2>
                <ul>
                    @foreach (var lembrete in lembretesSemana.Where(l => l.TipoLembrete == Planner.Models.Enum.TipoLembrete.Reuniao))
                    {
                        <li>@lembrete.Titulo - @lembrete.DataHora.ToString("dd/MM/yyyy HH:mm")</li>
                    }
                </ul>
            </div>

            <div class="compras">
                <h2>Compras</h2>
                <ul>
                    @foreach (var lembrete in lembretesSemana.Where(l => l.TipoLembrete == Planner.Models.Enum.TipoLembrete.Compras))
                    {
                        <li>@lembrete.Titulo - @lembrete.DataHora.ToString("dd/MM/yyyy HH:mm")</li>
                    }
                </ul>
            </div>
        </div>


    </div>
        <div class="meta">
            <h2>Metas Futuras</h2>
            <ul>
                @if (ViewBag.MetasFuturas is List<Planner.Models.Meta> metasFuturas && metasFuturas.Any())
                {
                // Filtrar apenas metas com status "Não Iniciada"
                    var metasNaoIniciadas = metasFuturas.Where(meta => meta.StatusMeta == Planner.Models.Enum.StatusMeta.NãoIniciada).ToList();

                    if (metasNaoIniciadas.Any())
                    {
                    foreach (var meta in metasNaoIniciadas)
                        {
                            string cor = "#000000"; // Cor padrão
                            if (categoriaCores.TryGetValue(meta.CategoriaAtividade, out var corEncontrada))
                            {
                                cor = corEncontrada;
                            }

                            <li style="color: @cor;">
                                <a href="@Url.Action("Detalhes", "Meta", new { id = meta.Id })" style="color: inherit; text-decoration: none;">
                                    <strong>@meta.Titulo</strong> - Prazo: @meta.Prazo.ToString("dd/MM/yyyy")
                                </a>
                            </li>
                        }
                    }
                    else
                    {
                        <li>Nenhuma meta futura.</li>
                    }
                }
                else
                {
                    <li>Nenhuma meta futura.</li>
                }
            </ul>
        </div>
    </div>

    <script src="~/js/script.js"></script>
</body>
</html>
